{"mappings":"ACGA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAE/B,EAAW,EAAM,KAAK,CAAC,IAAI,CAE5B,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAW,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAExC,EAAI,YAAY,CAAC,EAAU,EAAI,KAAK,CAAC,EAAI,KAAK,CAAC,MAAM,CAAG,EAAE,CAC5D,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,IAAM,EAAW,EAAM,OAAO,CAAC,EAAE,CAAC,IAAI,CAEjC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAW,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAExC,EAAI,YAAY,CAAC,EAAU,EAAI,KAAK,CAAC,EAAI,KAAK,CAAC,MAAM,CAAG,EAAE,CAC5D,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,IAAM,EAAW,EAAM,KAAK,CAAC,IAAI,CAE5B,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAW,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAExC,EAAI,YAAY,CAAC,EAAU,EAAI,KAAK,CAAC,EAAI,KAAK,CAAC,MAAM,CAAG,EAAE,CAC5D,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write your code here\nvar table = document.querySelector(\"table\");\nvar headRows = table.tHead.rows;\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = headRows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var row = _step.value;\n        var position = row.cells[1].cloneNode(true);\n        row.insertBefore(position, row.cells[row.cells.length - 1]);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nvar bodyRows = table.tBodies[0].rows;\nvar _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\ntry {\n    for(var _iterator1 = bodyRows[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n        var row1 = _step1.value;\n        var position1 = row1.cells[1].cloneNode(true);\n        row1.insertBefore(position1, row1.cells[row1.cells.length - 1]);\n    }\n} catch (err) {\n    _didIteratorError1 = true;\n    _iteratorError1 = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n            _iterator1.return();\n        }\n    } finally{\n        if (_didIteratorError1) {\n            throw _iteratorError1;\n        }\n    }\n}\nvar footRows = table.tFoot.rows;\nvar _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;\ntry {\n    for(var _iterator2 = footRows[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){\n        var row2 = _step2.value;\n        var position2 = row2.cells[1].cloneNode(true);\n        row2.insertBefore(position2, row2.cells[row2.cells.length - 1]);\n    }\n} catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n        }\n    } finally{\n        if (_didIteratorError2) {\n            throw _iteratorError2;\n        }\n    }\n}\n\n//# sourceMappingURL=index.eb13789c.js.map\n","'use strict';\n\n// write your code here\nconst table = document.querySelector('table');\n\nconst headRows = table.tHead.rows;\n\nfor (const row of headRows) {\n  const position = row.cells[1].cloneNode(true);\n\n  row.insertBefore(position, row.cells[row.cells.length - 1]);\n}\n\nconst bodyRows = table.tBodies[0].rows;\n\nfor (const row of bodyRows) {\n  const position = row.cells[1].cloneNode(true);\n\n  row.insertBefore(position, row.cells[row.cells.length - 1]);\n}\n\nconst footRows = table.tFoot.rows;\n\nfor (const row of footRows) {\n  const position = row.cells[1].cloneNode(true);\n\n  row.insertBefore(position, row.cells[row.cells.length - 1]);\n}\n"],"names":["table","document","querySelector","headRows","tHead","rows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","position","cells","cloneNode","insertBefore","length","err","return","bodyRows","tBodies","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","row1","position1","footRows","tFoot","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","row2","position2"],"version":3,"file":"index.eb13789c.js.map"}